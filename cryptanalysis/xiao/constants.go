package xiao

import (
	"github.com/OpenWhiteBox/primitives/matrix"
)

// equivalences are the B parts of the self-equivalences of the whitened "standard" white-box.
var equivalences = []matrix.Matrix{
	matrix.Matrix{
		matrix.Row{0x01},
		matrix.Row{0x02},
		matrix.Row{0x04},
		matrix.Row{0x08},
		matrix.Row{0x10},
		matrix.Row{0x20},
		matrix.Row{0x40},
		matrix.Row{0x80},
	},
	matrix.Matrix{
		matrix.Row{0x2c},
		matrix.Row{0xfe},
		matrix.Row{0xbe},
		matrix.Row{0x59},
		matrix.Row{0x9b},
		matrix.Row{0x54},
		matrix.Row{0x37},
		matrix.Row{0x0c},
	},
	matrix.Matrix{
		matrix.Row{0x11},
		matrix.Row{0xa4},
		matrix.Row{0x07},
		matrix.Row{0xd5},
		matrix.Row{0x7c},
		matrix.Row{0x65},
		matrix.Row{0x8a},
		matrix.Row{0x03},
	},
	matrix.Matrix{
		matrix.Row{0xb3},
		matrix.Row{0xed},
		matrix.Row{0xda},
		matrix.Row{0xd9},
		matrix.Row{0x1c},
		matrix.Row{0x12},
		matrix.Row{0xa3},
		matrix.Row{0xe7},
	},
	matrix.Matrix{
		matrix.Row{0x6d},
		matrix.Row{0x61},
		matrix.Row{0xb2},
		matrix.Row{0xe3},
		matrix.Row{0x41},
		matrix.Row{0xf9},
		matrix.Row{0x72},
		matrix.Row{0xb5},
	},
	matrix.Matrix{
		matrix.Row{0xb7},
		matrix.Row{0xe6},
		matrix.Row{0x6c},
		matrix.Row{0x32},
		matrix.Row{0x1f},
		matrix.Row{0xf1},
		matrix.Row{0xab},
		matrix.Row{0xd2},
	},
	matrix.Matrix{
		matrix.Row{0xaf},
		matrix.Row{0x2f},
		matrix.Row{0x84},
		matrix.Row{0x31},
		matrix.Row{0xae},
		matrix.Row{0xd8},
		matrix.Row{0xd3},
		matrix.Row{0x5e},
	},
	matrix.Matrix{
		matrix.Row{0xa8},
		matrix.Row{0x4f},
		matrix.Row{0x3d},
		matrix.Row{0xbd},
		matrix.Row{0x1b},
		matrix.Row{0x81},
		matrix.Row{0x06},
		matrix.Row{0x51},
	},
}

// mixColumn is the 32-by-32 matrix computing the AES MixColumn operation.
var mixColumn = matrix.Matrix{
	matrix.Row{0x80, 0x81, 0x01, 0x01},
	matrix.Row{0x81, 0x83, 0x02, 0x02},
	matrix.Row{0x02, 0x06, 0x04, 0x04},
	matrix.Row{0x84, 0x8c, 0x08, 0x08},
	matrix.Row{0x88, 0x98, 0x10, 0x10},
	matrix.Row{0x10, 0x30, 0x20, 0x20},
	matrix.Row{0x20, 0x60, 0x40, 0x40},
	matrix.Row{0x40, 0xc0, 0x80, 0x80},
	matrix.Row{0x01, 0x80, 0x81, 0x01},
	matrix.Row{0x02, 0x81, 0x83, 0x02},
	matrix.Row{0x04, 0x02, 0x06, 0x04},
	matrix.Row{0x08, 0x84, 0x8c, 0x08},
	matrix.Row{0x10, 0x88, 0x98, 0x10},
	matrix.Row{0x20, 0x10, 0x30, 0x20},
	matrix.Row{0x40, 0x20, 0x60, 0x40},
	matrix.Row{0x80, 0x40, 0xc0, 0x80},
	matrix.Row{0x01, 0x01, 0x80, 0x81},
	matrix.Row{0x02, 0x02, 0x81, 0x83},
	matrix.Row{0x04, 0x04, 0x02, 0x06},
	matrix.Row{0x08, 0x08, 0x84, 0x8c},
	matrix.Row{0x10, 0x10, 0x88, 0x98},
	matrix.Row{0x20, 0x20, 0x10, 0x30},
	matrix.Row{0x40, 0x40, 0x20, 0x60},
	matrix.Row{0x80, 0x80, 0x40, 0xc0},
	matrix.Row{0x81, 0x01, 0x01, 0x80},
	matrix.Row{0x83, 0x02, 0x02, 0x81},
	matrix.Row{0x06, 0x04, 0x04, 0x02},
	matrix.Row{0x8c, 0x08, 0x08, 0x84},
	matrix.Row{0x98, 0x10, 0x10, 0x88},
	matrix.Row{0x30, 0x20, 0x20, 0x10},
	matrix.Row{0x60, 0x40, 0x40, 0x20},
	matrix.Row{0xc0, 0x80, 0x80, 0x40},
}

// unMixColumn is the inverse of mixColumn
var unMixColumn, _ = mixColumn.Invert()
